
trigger: none

variables:
- template: build-variables.yml
- template: pr-variables.yml

stages:
- stage: BuildUnitTests
  displayName: 'Build and run unit tests'
  dependsOn: []
  jobs:
  - job: Windows
    pool:
      vmImage: 'windows-2019'
    steps:
    - template: build.yml

  - job: Linux
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - template: build.yml
      parameters:
        packageArtifacts: false

- stage: provisionEnvironment
  displayName: Provision Environment
  dependsOn: []
  jobs:
  - job: provision
    steps:
    - task: AzurePowerShell@4
      displayName: Provision Resource Group
      inputs:
        azureSubscription: 'Microsoft Health Open Source Subscription'
        azurePowerShellVersion: latestVersion
        ScriptType: inlineScript
        Inline: |
          New-AzResourceGroup -Name "$(DeploymentEnvironmentName)" -Location "$(ResourceGroupRegion)" -Force

- stage: aadTestEnvironment
  displayName: Setup AAD Test Environment
  dependsOn:
  - provisionEnvironment
  - BuildUnitTests
  jobs:
  - job: setup
    steps:
    - task: AzureKeyVault@1
      displayName: 'Azure Key Vault: resolute-oss-tenant-info'
      inputs:
        azureSubscription: 'Microsoft Health Open Source Subscription'
        KeyVaultName: 'resolute-oss-tenant-info'

    - task: AzurePowerShell@4
      displayName: Setup Test Environment
      inputs:
        azureSubscription: 'Microsoft Health Open Source Subscription'
        azurePowerShellVersion: latestVersion
        ScriptType: inlineScript
        Inline: |
          Install-Module AzureAD -Force
          dotnet dev-certs https

          $tenantId = "$(tenant-id)"

          # Get admin token
          $username = "$(tenant-admin-user-name)"
          $password_raw = "$(tenant-admin-user-password)"
          $password =  ConvertTo-SecureString -AsPlainText $password_raw -Force
          $adminCredential = New-Object PSCredential $username,$password
 
          $adTokenUrl = "https://login.microsoftonline.com/$tenantId/oauth2/token"
          $resource = "https://graph.windows.net/"
 
          $body = @{
              grant_type = "password"
              username   = $username
              password   = $password_raw
              resource   = $resource 
              client_id  = "1950a258-227b-4e31-a9cf-717495945fc2" # Microsoft Azure PowerShell
          }
 
          $response = Invoke-RestMethod -Method 'Post' -Uri $adTokenUrl -ContentType "application/x-www-form-urlencoded" -Body $body
          $token = $response.access_token

          Connect-AzureAD -TenantId $tenantId -AadAccessToken $response.access_token -AccountId $username

          Import-Module $(System.DefaultWorkingDirectory)/_Microsoft.fhir-server.pr/deploy/scripts/PowerShell/FhirServer/FhirServer.psd1
          Import-Module $(System.DefaultWorkingDirectory)/_Microsoft.fhir-server.pr/deploy/scripts/PowerShell/FhirServerRelease/FhirServerRelease.psd1

          $output = Add-AadTestAuthEnvironment -TestAuthEnvironmentPath $(System.DefaultWorkingDirectory)/_Microsoft.fhir-server.pr/deploy/testauthenvironment.json -EnvironmentName $(DeploymentEnvironmentName) -TenantAdminCredential $adminCredential

- stage: deployStu3
  displayName: 'Deploy STU3 Site'
  dependsOn:
  - provisionEnvironment
  - BuildUnitTests
  jobs:
  - template: ./jobs/provision-deploy.yml
    parameters: 
      version: Stu3
      webAppName: $(DeploymentEnvironmentName)
      appServicePlanName: $(appServicePlanName)
      appServicePlanResourceGroup: $(resourceGroupRoot)
      subscription: $(ConnectedServiceName)
      resourceGroup: $(DeploymentEnvironmentName)
      testEnvironmentUrl: $(TestEnvironmentUrl)

- stage: deployStu3Sql
  displayName: 'Deploy STU3 SQL Site'
  dependsOn:
  - provisionEnvironment
  - BuildUnitTests
  jobs:
  - template: ./jobs/provision-deploy.yml
    parameters: 
      version: Stu3
      sql: true
      webAppName: $(DeploymentEnvironmentNameSql)
      appServicePlanName: $(appServicePlanName)
      appServicePlanResourceGroup: $(resourceGroupRoot)
      subscription: $(ConnectedServiceName)
      resourceGroup: $(DeploymentEnvironmentName)
      testEnvironmentUrl: $(TestEnvironmentUrl)

- stage: deployR4
  displayName: 'Deploy R4 Site'
  dependsOn:
  - provisionEnvironment
  - BuildUnitTests
  jobs:
  - template: ./jobs/provision-deploy.yml
    parameters: 
      version: R4
      webAppName: $(DeploymentEnvironmentNameR4)
      appServicePlanName: $(appServicePlanName)
      appServicePlanResourceGroup: $(resourceGroupRoot)
      subscription: $(ConnectedServiceName)
      resourceGroup: $(DeploymentEnvironmentName)
      testEnvironmentUrl: $(TestEnvironmentUrl)

- stage: deployR4Sql
  displayName: 'Deploy R4 SQL Site'
  dependsOn:
  - provisionEnvironment
  - BuildUnitTests
  jobs:
  - template: ./jobs/provision-deploy.yml
    parameters: 
      version: R4
      sql: true
      webAppName: $(DeploymentEnvironmentNameR4Sql)
      appServicePlanName: $(appServicePlanName)
      appServicePlanResourceGroup: $(resourceGroupRoot)
      subscription: $(ConnectedServiceName)
      resourceGroup: $(DeploymentEnvironmentName)
      testEnvironmentUrl: $(TestEnvironmentUrl)

- stage: testStu3
  displayName: 'Run Stu3 Tests'
  dependsOn:
  - aadTestEnvironment
  - deployStu3
  - deployStu3Sql
  jobs:
  - template: ./jobs/run-tests.yml
    parameters:
      version: Stu3

- stage: testR4
  displayName: 'Run R4 Tests'
  dependsOn:
  - aadTestEnvironment
  - deployR4
  - deployR4Sql
  jobs:
  - template: ./jobs/run-tests.yml
    parameters:
      version: R4

- stage: cleanup
  displayName: 'Cleanup Azure Environment'
  dependsOn:
  - testStu3
  - testR4
  jobs:
    - job: DeleteResourceGroup
      displayName: 'Delete resource group'
      pool:
        vmImage: 'vs2017-win2016'
      steps:
      - task: AzurePowerShell@4
        displayName: 'Delete resource group'
        inputs:
          azureSubscription: 'Microsoft Health Open Source Subscription'
          azurePowerShellVersion: latestVersion
          ScriptType: InlineScript
          Inline: 'Get-AzResourceGroup -Name $(DeploymentEnvironmentName) | Remove-AzResourceGroup -Verbose -Force'

    - job: cleanupAad
      displayName: 'Cleanup Azure Active Directory'
      pool:
        vmImage: 'vs2017-win2016' 
      steps:
      - task: DownloadBuildArtifacts@0
        inputs:
          buildType: 'current'
          downloadType: 'single'
          downloadPath: '$(System.ArtifactsDirectory)'
          artifactName: 'deploy'

      - task: AzureKeyVault@1
        displayName: 'Azure Key Vault: resolute-oss-tenant-info'
        inputs:
          azureSubscription: 'Microsoft Health Open Source Subscription'
          KeyVaultName: 'resolute-oss-tenant-info'

      - task: AzurePowerShell@4
        displayName: 'Delete AAD apps'
        inputs:
          azureSubscription: 'Microsoft Health Open Source Subscription'
          azurePowerShellVersion: latestVersion
          ScriptType: InlineScript
          Inline: |
            Install-Module AzureAD -Force
            $clientId = "$(tenant-admin-service-principal-name)"
            $clientSecret = "$(tenant-admin-service-principal-password)"
            $tenantId = "$(tenant-id)"

            $adTokenUrl = "https://login.microsoftonline.com/$tenantId/oauth2/token"
            $resource = "https://graph.windows.net/"

            $body = @{
                grant_type    = "client_credentials"
                client_id     = $clientId
                client_secret = $clientSecret
                resource      = $resource
            }

            $response = Invoke-RestMethod -Method 'Post' -Uri $adTokenUrl -ContentType "application/x-www-form-urlencoded" -Body $body
            Connect-AzureAD -TenantId $tenantId -AadAccessToken $response.access_token -AccountId $username

            Import-Module $(System.DefaultWorkingDirectory)/samples/scripts/PowerShell/FhirServer/FhirServer.psd1
            Import-Module $(System.DefaultWorkingDirectory)/release/scripts/PowerShell/FhirServerRelease/FhirServerRelease.psd1

            Remove-AadTestAuthEnvironment -TestAuthEnvironmentPath $(System.DefaultWorkingDirectory)/testauthenvironment.json -EnvironmentName $(DeploymentEnvironmentName)
