trigger:
  branches:
    include: ['personal/brpoll/yaml-build']
variables:
    ConnectedServiceName: 'Microsoft Health Open Source Subscription'
    ResourceGroupRegion: 'southcentralus'
    resourceGroupRoot: 'msh-fhir-pr'
    appServicePlanName: '$(resourceGroupRoot)-southcentralus'
    prNumber: $(system.pullRequest.pullRequestNumber)
    DeploymentEnvironmentName: '$(resourceGroupRoot)-$(prNumber)'
    DeploymentEnvironmentNameR4: '$(DeploymentEnvironmentName)-r4'
    DeploymentEnvironmentNameSql: '$(DeploymentEnvironmentName)-sql'
    DeploymentEnvironmentNameR4Sql: '$(DeploymentEnvironmentName)-r4-sql'
    CrucibleEnvironmentUrl: 'https://crucible.mshapis.com/'
    TestEnvironmentUrl: 'https://$(DeploymentEnvironmentName).azurewebsites.net'
stages:
- stage: BuildUnitTests
  displayName: 'Build and run unit tests'
  jobs:
  - template: .vsts-pr.yml

- stage: provisionEnvironment
  displayName: Provision Environment
  jobs:
  - job: provision
    steps:
    - task: AzurePowerShell@4
      displayName: Provision Resource Group
      inputs:
        azureSubscription: 'Microsoft Health Open Source Subscription'
        azurePowerShellVersion: latestVersion
        ScriptType: inlineScript
        Inline: |
          New-AzureRmResourceGroup -Name "$(DeploymentEnvironmentName)" -Location "$(ResourceGroupRegion)" -Force

- stage: deployStu3
  displayName: 'Deploy STU3 Site'
  dependsOn:
  - provisionEnvironment
  - BuildUnitTests
  jobs:
  - template: ./jobs/provision-deploy.yml
    parameters: 
      version: Stu3
      webAppName: $(DeploymentEnvironmentName)
      appServicePlanName: $(appServicePlanName)
      appServicePlanResourceGroup: $(resourceGroupRoot)
      subscription: $(ConnectedServiceName)
      resourceGroup: $(DeploymentEnvironmentName)
      testEnvironmentUrl: $(TestEnvironmentUrl)

- stage: deployStu3Sql
  displayName: 'Deploy STU3 SQL Site'
  dependsOn:
  - provisionEnvironment
  - BuildUnitTests
  jobs:
  - template: ./jobs/provision-deploy.yml
    parameters: 
      version: Stu3
      sql: true
      webAppName: $(DeploymentEnvironmentName)
      appServicePlanName: $(appServicePlanName)
      appServicePlanResourceGroup: $(resourceGroupRoot)
      subscription: $(ConnectedServiceName)
      resourceGroup: $(DeploymentEnvironmentName)
      testEnvironmentUrl: $(TestEnvironmentUrl)

- stage: deployR4
  displayName: 'Deploy R4 Site'
  dependsOn:
  - provisionEnvironment
  - BuildUnitTests
  jobs:
  - template: ./jobs/provision-deploy.yml
    parameters: 
      version: R4
      webAppName: $(DeploymentEnvironmentName)
      appServicePlanName: $(appServicePlanName)
      appServicePlanResourceGroup: $(resourceGroupRoot)
      subscription: $(ConnectedServiceName)
      resourceGroup: $(DeploymentEnvironmentName)
      testEnvironmentUrl: $(TestEnvironmentUrl)

- stage: deployR4Sql
  displayName: 'Deploy R4 SQL Site'
  dependsOn:
  - provisionEnvironment
  - BuildUnitTests
  jobs:
  - template: ./jobs/provision-deploy.yml
    parameters: 
      version: R4
      sql: true
      webAppName: $(DeploymentEnvironmentName)
      appServicePlanName: $(appServicePlanName)
      appServicePlanResourceGroup: $(resourceGroupRoot)
      subscription: $(ConnectedServiceName)
      resourceGroup: $(DeploymentEnvironmentName)
      testEnvironmentUrl: $(TestEnvironmentUrl)

- stage: integrationTest
  displayName: 'Run Integration and E2E Tests'
  dependsOn:
  - deployStu3
  - deployStu3Sql
  - deployR4
  - deployR4Sql
  variables:
    TestEnvironmentUrl: 'https://$(DeploymentEnvironmentName).azurewebsites.net'
    TestEnvironmentUrl_Sql: 'https://$(DeploymentEnvironmentNameSql).azurewebsites.net'
    TestEnvironmentUrl_R4: 'https://$(DeploymentEnvironmentNameR4).azurewebsites.net'
    TestEnvironmentUrl_R4_Sql: 'https://$(DeploymentEnvironmentNameR4Sql).azurewebsites.net'
    TestEnvironmentName: 'OSS PR$(prNumber)'
    Resource: '$(TestEnvironmentUrl)'

  jobs:
  - job: "integrationTests"
    pool:
      vmImage: 'vs2017-win2016'
    steps:
    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        downloadType: 'single'
        downloadPath: '$(System.ArtifactsDirectory)'
        artifactName: 'IntegrationTests'

    - task: DotNetCoreInstaller@0
      inputs:
        version: '2.2.103' 

    - task: AzureKeyVault@1
      displayName: 'Azure Key Vault: $(DeploymentEnvironmentName)'
      inputs:
        azureSubscription: 'Microsoft Health Open Source Subscription'
        KeyVaultName: '$(DeploymentEnvironmentName)'

    - task: AzureKeyVault@1
      displayName: 'Azure Key Vault: $(DeploymentEnvironmentNameSql)'
      inputs:
        azureSubscription: 'Microsoft Health Open Source Subscription'
        KeyVaultName: $(DeploymentEnvironmentNameSql)
    - task: VSTest@2
      displayName: 'Run Integration Tests'
      inputs:
        testSelector: testAssemblies
        testAssemblyVer2: |
          **\*Tests.Integration*.dll
        searchFolder: '$(System.ArtifactsDirectory)'
      env:
        'CosmosDb:Host': $(CosmosDb--Host)
        'CosmosDb:Key': $(CosmosDb--Key)
        'SqlServer:ConnectionString': $(SqlServer--ConnectionString)


  - job: 'e2eTests'
    pool:
      vmImage: 'vs2017-win2016'
    steps:
    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        downloadType: 'single'
        downloadPath: '$(System.ArtifactsDirectory)'
        artifactName: 'IntegrationTests'
    - task: DotNetCoreInstaller@0
      inputs:
        version: '2.2.103' 
        
    - task: AzureKeyVault@1
      displayName: 'Azure Key Vault: resolute-oss-tenant-info'
      inputs:
        azureSubscription: 'Microsoft Health Open Source Subscription'
        KeyVaultName: 'resolute-oss-tenant-info'
    
    - task: AzurePowerShell@3
      displayName: 'Set Variables'
      inputs:
        azureSubscription: 'Microsoft Health Open Source Subscription'
        ScriptType: InlineScript
        preferredAzurePowerShellVersion: 5.1.1
        Inline: |
          Install-Module AzureAD -Force
          dotnet dev-certs https

          # Get admin token
          $tenantId = "$(tenant-id)"
          $username = "$(tenant-admin-user-name)"
          $password_raw = "$(tenant-admin-user-password)"
          $password =  ConvertTo-SecureString -AsPlainText $password_raw -Force
          $adminCredential = New-Object PSCredential $username,$password

          $adTokenUrl = "https://login.microsoftonline.com/$tenantId/oauth2/token"
          $resource = "https://graph.windows.net/"

          $body = @{
              grant_type = "password"
              username   = $username
              password   = $password_raw
              resource   = $resource
              client_id  = "1950a258-227b-4e31-a9cf-717495945fc2" # Microsoft Azure PowerShell
          }

          $response = Invoke-RestMethod -Method 'Post' -Uri $adTokenUrl -ContentType "application/x-www-form-urlencoded" -Body $body
          $token = $response.access_token

          Connect-AzureAD -TenantId $tenantId -AadAccessToken $response.access_token -AccountId $username

          Import-Module $(System.DefaultWorkingDirectory)/samples/scripts/PowerShell/FhirServer/FhirServer.psd1
          Import-Module $(System.DefaultWorkingDirectory)/release/scripts/PowerShell/FhirServerRelease/FhirServerRelease.psd1

          $output = Add-AadTestAuthEnvironment -TestAuthEnvironmentPath $(System.DefaultWorkingDirectory)/testauthenvironment.json -EnvironmentName $(DeploymentEnvironmentName) -TenantAdminCredential $adminCredential

          foreach($user in $output.environmentUsers)
          {
              Write-Host "Retrieving '$($user.environmentId)-password' from  '$(DeploymentEnvironmentName)-ts'"

              $secret = Get-AzureKeyVaultSecret -VaultName $(DeploymentEnvironmentName)-ts -Name "$($user.environmentId)-password"
              Write-Host "##vso[task.setvariable variable=user_$($user.Id)_id]$($user.upn)"
              Write-Host "##vso[task.setvariable variable=user_$($user.Id)_secret]$($secret.SecretValueText)"
          }

          foreach($clientApp in $output.environmentClientApplications)
          {
              Write-Host "Retrieving '$($clientApp.displayName)-secret' from '$(DeploymentEnvironmentName)-ts'"
              $secret = Get-AzureKeyVaultSecret -VaultName $(DeploymentEnvironmentName)-ts -Name "$($clientApp.displayName)-secret"

              Write-Host "##vso[task.setvariable variable=app_$($clientApp.Id)_id]$($clientApp.AppId)"
              Write-Host "##vso[task.setvariable variable=app_$($clientApp.Id)_secret]$($secret.SecretValueText)"
              Write-Host "##vso[task.setvariable variable=TestClientSecret]$($secret.SecretValueText)"
          }

    - task: VSTest@2
      displayName: 'Run E2E Tests'
      inputs:
        testSelector: testAssemblies
        testAssemblyVer2: |
          **\*Tests.E2E*.dll
        searchFolder: '$(System.ArtifactsDirectory)'


- stage: cleanup
  displayName: 'Cleanup Azure Environment'
  dependsOn:
  - integrationTest
  jobs:
    - job: DeleteResourceGroup
      displayName: 'Delete resource group'
      pool:
        vmImage: 'vs2017-win2016'
      steps:
      - task: AzurePowerShell@3
        displayName: 'Delete resource group'
        inputs:
          azureSubscription: 'Microsoft Health Open Source Subscription'
          ScriptType: InlineScript
          Inline: 'Get-AzureRmResourceGroup -Name $(DeploymentEnvironmentName) | Remove-AzureRmResourceGroup -Verbose -Force'
          preferredAzurePowerShellVersion: 5.1.1
    - job: cleanupAad
      displayName: 'Cleanup Azure Active Directory'
      pool:
        vmImage: 'vs2017-win2016' 
      steps:
      - task: DownloadBuildArtifacts@0
        inputs:
          buildType: 'current'
          downloadType: 'single'
          downloadPath: '$(System.ArtifactsDirectory)'
          artifactName: 'deploy'
      - task: AzureKeyVault@1
        displayName: 'Azure Key Vault: resolute-oss-tenant-info'
        inputs:
          azureSubscription: 'Microsoft Health Open Source Subscription'
          KeyVaultName: 'resolute-oss-tenant-info'
      - task: AzurePowerShell@3
        inputs:
          azureSubscription: 'Microsoft Health Open Source Subscription'
          ScriptType: InlineScript
          preferredAzurePowerShellVersion: 5.1.1
          Inline: |
            $clientId = "$(tenant-admin-service-principal-name)"
            $clientSecret = "$(tenant-admin-service-principal-password)"
            $tenantId = "$(tenant-id)"

            $adTokenUrl = "https://login.microsoftonline.com/$tenantId/oauth2/token"
            $resource = "https://graph.windows.net/"

            $body = @{
                grant_type    = "client_credentials"
                client_id     = $clientId
                client_secret = $clientSecret
                resource      = $resource
            }

            $response = Invoke-RestMethod -Method 'Post' -Uri $adTokenUrl -ContentType "application/x-www-form-urlencoded" -Body $body
            $token = $response.access_token

            Connect-AzureAD -TenantId $tenantId -AadAccessToken $response.access_token -AccountId $clientId

            Import-Module $(System.DefaultWorkingDirectory)/samples/scripts/PowerShell/FhirServer/FhirServer.psd1
            Import-Module $(System.DefaultWorkingDirectory)/release/scripts/PowerShell/FhirServerRelease/FhirServerRelease.psd1

            Remove-AadTestAuthEnvironment -TestAuthEnvironmentPath $(System.DefaultWorkingDirectory)/testauthenvironment.json -EnvironmentName $(DeploymentEnvironmentName)
        displayName: 'Delete AAD apps'
