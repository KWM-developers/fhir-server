
parameters:
- name: version
  type: string
- name: sql
  type: boolean
  default: false
- name: webAppName
  type: string
- name: appServicePlanName
  type: string
- name: appServicePlanResourceGroup
  type: string
- name: subscription
  type: string
- name: resourceGroup
  type: string
- name: testEnvironmentUrl
  type: string

jobs:
- job: provisionEnvironment
  pool:
    vmImage: 'vs2017-win2016'
  steps:
  - task: AzureKeyVault@1
    displayName: 'Azure Key Vault: resolute-oss-tenant-info'
    inputs:
      azureSubscription: 'Microsoft Health Open Source Subscription'
      KeyVaultName: 'resolute-oss-tenant-info'

  - task: AzurePowerShell@4
    displayName: 'Azure PowerShell script: InlineScript'
    inputs:
      azureSubscription: 'Microsoft Health Open Source Subscription'
      azurePowerShellVersion: latestVersion
      ScriptType: inlineScript
      Inline: |
        Add-Type -AssemblyName System.Web
     
        $deployPath = "$(System.DefaultWorkingDirectory)/test/Configuration"
     
        $cors = (ConvertFrom-Json (Get-Content -Raw "$deployPath/corstestconfiguration.json"))
        $flattenedCors = $(System.DefaultWorkingDirectory)/release/scripts/PowerShell/ConvertTo-FlattenedConfigurationHashtable.ps1 -InputObject $cors
     
        $additionalProperties = $flattenedCors
     
        $additionalProperties["SqlServer__DeleteAllDataOnStartup"] = "true"
     
        $templateParameters = @{
            appServicePlanResourceGroup = "${{ parameters.appServicePlanResourceGroup }}"
            appServicePlanName = "${{ parameters.appServicePlanName }}"
            serviceName = "${{ parameters.webAppName }}"
            securityAuthenticationAuthority = "https://login.microsoftonline.com/$(tenant-id)"
            securityAuthenticationAudience = "${{ parameters.testEnvironmentUrl }}"
            additionalFhirServerConfigProperties = $additionalProperties 
            enableAadSmartOnFhirProxy = $true
            enableExport = $true
        }
     
        if("${{ parameters.sql }}" -eq "true"){
            $templateParameters["solutionType"] = "FhirServerSqlServer"
            $templateParameters["sqlAdminPassword"] = [System.Web.Security.Membership]::GeneratePassword(15, 5).replace(";", "_").replace("$","!")
     
            # Deploy SQL Environment
            New-AzResourceGroupDeployment -Name "${{ parameters.webAppName }}" -ResourceGroupName "${{ parameters.resourceGroup }}" -TemplateFile $(System.DefaultWorkingDirectory)/_Microsoft.fhir-server.pr/deploy/templates/default-azuredeploy-sql.json -TemplateParameterObject $templateParameters -Verbose
        }
        else{
            # Deploy CosmosDb environment
            New-AzResourceGroupDeployment -Name "${{ parameters.webAppName }}" -ResourceGroupName "${{ parameters.resourceGroup }}" -TemplateFile $(System.DefaultWorkingDirectory)/_Microsoft.fhir-server.pr/deploy/templates/default-azuredeploy.json -TemplateParameterObject $templateParameters -Verbose
        }
     
        Set-AzKeyVaultAccessPolicy -VaultName "${{ parameters.webAppName }}" -ObjectId 4d4d503d-9ca8-462e-9e18-b35fc8b5285b -PermissionsToSecrets list,get

  - task: DownloadBuildArtifacts@0
    inputs:
      buildType: 'current'
      downloadType: 'single'
      downloadPath: '$(System.ArtifactsDirectory)'
      artifactName: 'deploy'

  - task: AzureRmWebAppDeployment@3
    displayName: 'Azure App Service Deploy'
    inputs:
      azureSubscription: '${{ parameters.subscription }}'
      appType: 'app'
      WebAppName: '${{ parameters.webAppName }}'
      Package: '$(Build.ArtifactStagingDirectory)/deploy/*{{ parameters.version }}*.zip'
      TakeAppOfflineFlag: true
